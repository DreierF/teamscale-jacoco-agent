plugins {
	id 'java-library'

	// we don't want to cause conflicts between our dependencies and the target application
	// since the agent will be loaded with the same class loader as the profiled application
	// so we use the shadow plugin to relocate our dependencies
	id 'com.github.johnrengelman.shadow' version '4.0.3'
	id 'maven'
	id 'jacoco'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

test {
	useJUnitPlatform() // enable support for JUnit 5
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}
tasks.test.finalizedBy(jacocoTestReport)

version appVersion

repositories {
	mavenCentral()
}

jar {
	manifest {
		attributes "Main-Class": "com.teamscale.tia.CommandLineInterface"
	}
}

shadowJar {
	manifest {
		attributes "Main-Class": "com.teamscale.tia.CommandLineInterface"

		// The jaxb library, which we are shading is a multi release jar, so we have to explicitly "inherit" this attribute
		attributes 'Multi-Release': 'true'
	}

	// Fix relocation of multi version jar
	// Default would be shadow/META-INF/versions/9/, which is wrong
	// See http://openjdk.java.net/jeps/238
	relocate 'META-INF/versions/9/', 'META-INF/versions/9/shadow/'

	mergeServiceFiles()
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
	target = tasks.shadowJar
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

dependencies {
	api project(':teamscale-client')
	api project(':report-generator')
	api 'com.squareup.retrofit2:retrofit:2.5.0'
	compileOnly 'junit:junit:4.13'
	implementation 'com.squareup.retrofit2:converter-moshi:2.5.0'

	testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.1'
	testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: '1.5.1'
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.26.0'
	testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.4.1'

	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.1'
}

install {
	repositories.mavenInstaller {
		configuration = configurations.shadow
		pom.whenConfigured { it.dependencies.clear() }
	}
}

// At the moment we are stuck with the old maven plugin until support for private key
// files is added or we add a dedicated user with a password to our server.
// https://github.com/gradle/gradle/issues/1263
uploadShadow {
	repositories {
		mavenDeployer {
			configuration = configurations.deployerJars
			repository(url: cqseMavenRepositoryUrl) {
				authentication(userName: cqseMavenRepositoryUser, privateKey: cqseMavenRepositoryPrivateKey)
			}
			pom.whenConfigured { it.dependencies.clear() }
		}
	}
}
